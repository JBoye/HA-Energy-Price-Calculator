nordpool_calculator:
  input_datetime:
    calculator_end_time:
      name: Slut tid
      has_date: false
      has_time: true

    calculator_duration:
      name: Varighed
      has_date: false
      has_time: true

  input_number:
    calculator_kilowatt:
      name: Consumption kW
      icon: mdi:clock-start
      min: 0
      max: 30
      step: 0.01
      mode: box

  template:
    - sensor:
        - name: "Price Calculator"
          unique_id: 75a51b09
          attributes:
            start_times: >
              {# Configuration #}

              {# Name of Nordpool Sensor #}
              {% set sensor_name = "sensor.elpris" %}

              {# Consumption in kW #}
              {% set consumption = states("input_number.calculator_kilowatt") | float %}

              {# Duration of charging, washing, etc.  #}
              {% set input_duration = today_at(states("input_datetime.calculator_duration")) %}
              {% set duration = timedelta(hours = input_duration.hour, minutes = input_duration.minute) %} 

              {# First possible time to start. Default now() #}
              {% set start_time = now() %}       

              {# Deadline for when the operation should be finished (For example departure time). 
              Default tomorrow at 23:59:59 if tomorrows prices are available, otherwise today at 23:59:59 #}
              {% set end_time = today_at(states("input_datetime.calculator_end_time")) + timedelta(days = 1 if today_at(states("input_datetime.calculator_end_time")) < now() else 0) %}

              {# Macros #}
              {%- macro date_to_index(date) -%}{{(date.hour + (date.date() - now().date()).days * 24)}}{%- endmacro -%}{# as datetime? #}
              {%- macro index_to_date(index) -%}{{today_at("00:00") + timedelta(hours = index)}}{%- endmacro -%}{# as int? #}

              {# All available prices from Nordpool #}
              {% set prices_raw = state_attr(sensor_name, "raw_today") + state_attr(sensor_name, "raw_tomorrow") %}

              {# End time can not be later than the available price data #}
              {% set end_time = [end_time, (prices_raw | last).end] | min %}

              {% set start_hour = date_to_index(start_time) | int %}
              {% set end_hour = 2 + date_to_index(end_time - duration) | int %}

              {# All prices within timerange #}
              {% set prices = prices_raw[start_hour:end_hour] %}

              {# namespace to hold values #}
              {% set ns = namespace(start_times = []) %}
              {% for price in prices %}
                {% set item = namespace(start = price.start, end = price.start + duration) %}
                {% if loop.first %}
                  {% set item.start = start_time %}
                  {% set item.end = start_time + duration %}
                {% elif loop.last %}
                  {% set item.start = end_time - duration %}
                  {% set item.end = end_time %}
                {% endif %}
                {% set item.value = 0%}
                {% for index in range(date_to_index(item.start) | int, date_to_index(item.end) | int + 1) %}
                    {% set hour_duration = ([item.end, index_to_date(index + 1) | as_datetime] | min - [item.start, index_to_date(index) | as_datetime] | max).total_seconds() / 60 / 60 %}
                    {% if hour_duration > 0 %}
                      {% set item.value = item.value + (prices_raw[index].value * hour_duration) %}
                    {% endif %}                    
                {% endfor %}
                {% set ns.start_times = ns.start_times + [{'start': item.start | string, 'end': item.end | string, 'value': (item.value * consumption) | round (2)}] %}
              {% endfor -%}               
              {# Sort items by value or start #}
              {{ns.start_times | sort(attribute='start') | tojson}}

          state: >
            Calculating...?

        - name: "Price Calculator Price now"
          unique_id: 3d357de0
          state: >
            {{ state_attr("sensor.price_calculator", "start_times")[0].value | round (2)}}

        - name: "Price Calculator Cheapest Time"
          unique_id: fa95a6f8
          state: >
            {{ (state_attr("sensor.price_calculator", "start_times") | sort(attribute='value'))[0].start }}
          attributes:
            countdown: >
              {% set value = states("sensor.price_calculator_cheapest_time") | as_datetime %}
              {% if value > now() -%}
              start om {{'%02d' % ((value - now()).total_seconds() / 60 / 60) | round(0, 'floor')}}:{{'%02d' % ((value - now()).total_seconds() / 60 % 60) | round(0, 'floor')}}
              {%- else -%}start nu{%- endif %}

        - name: "Price Calculator Cheapest Price"
          unique_id: e725fdd4
          state: >
            {{ (state_attr("sensor.price_calculator", "start_times") | sort(attribute='value'))[0].value | round (2)}}

    - binary_sensor:
        - name: "Price Calculator Is cheapest"
          unique_id: 26d33c17
          state: >
            {{ (state_attr("sensor.price_calculator", "start_times") | sort(attribute='value'))[0] == state_attr("sensor.price_calculator", "start_times")}}
